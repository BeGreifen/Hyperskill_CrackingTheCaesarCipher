type: edu
files:
- name: solution.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import CheckResult, TestedProgram, StageTest, dynamic_test, WrongAnswer
    import string


    def encoder_3(right_shift, message):
        # making the encoded message
        # string 'butterscotch' becomes string 'y r q q b o p z l q z e'
        # this uses the string.ascii_lowercase string which is 'abcdefghijklmnopqrstuvwxyz'
        # and adds a shift
        # an encoded message will make an IndexError if the deciphering shift leaves the string's range
        # so a modulus is used
        message = message.lower()
        message_list = list(message)
        message_encoded_nums = [string.ascii_lowercase.index(letter) + right_shift for letter in message]
        message_encoded = [string.ascii_lowercase[index % 26] for index in message_encoded_nums]
        message_encoded = ' '.join(message_encoded)
        return message_encoded


    class DecipherTest(StageTest):
        test_data = [
            # shift, first message, second message
            # first message MUST contain substring 'butterscotch'
            # x is used in place of ' ' spaces
            [-5, 'Myxmomxmadexsomexbutterscotchxpie', 'Myxmomxmadexsomexpie'],
            [-2, 'Mmmxbutterscotchxisxsoxtasty', 'Pleasexcomextryxaxslice'],
            [2, 'Ixlovexthexsmellxofxbutterscotch', 'Thexhousexsmellsxlikexpie'],
            [3, 'Somethingxsomethingxbutterscotch', 'myxdogxisxsuperxlazy'],
            [15, 'HerexIxmentionxbutterscotch', 'Ifxyouxdoxnotxhurryxmyxdogxwillxeatxthexpie'],
            [4, 'barkxbarkxbutterscotch', 'Youxbetterxhurryxifxyouxwantxsome'],
            [6, 'butterscotchxandxpiexcrustxisxaxgreatxcombo', 'Myxdogxwillxeatxitxanyxhourxnow'],
            [7, 'butterscotch', 'afterxshexrunsxoutxofxtreats']
        ]

        @dynamic_test(data=test_data)
        def test(self, *x):
            encoded_message_1 = encoder_3(right_shift=x[0], message=x[1])
            encoded_message_2 = encoder_3(right_shift=x[0], message=x[2])
            pr = TestedProgram()
            pr.start()
            output = pr.execute(stdin=f'{encoded_message_1}\n{encoded_message_2}')
            if not output:
                raise WrongAnswer('Your program did not print anything.')
            if not output.isascii():
                raise WrongAnswer('This string contains non-ascii values.')
            output_cleaned = output.lower().strip().replace(' ', '')
            if 'butterscotch' in output_cleaned:
                raise WrongAnswer('This may be the first deciphered message. '
                                  'Please only print the second deciphered message.')
            check = x[2].lower().replace('x', ' ').replace(' ', '') in output_cleaned
            return CheckResult(check, f'Wrong message returned.\nYou printed: {output}.')


    if __name__ == '__main__':
        DecipherTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import DecipherTest

    if __name__ == '__main__':    DecipherTest().run_tests()
  learner_created: false
- name: app.log
  visible: true
  text: |
    2023-07-30 10:08:06,048 - INFO - **** solution started ****
    2023-07-30 10:08:06,055 - INFO - main - line no: 85 with args: (), kwargs: {}
    2023-07-30 10:08:08,436 - INFO - string_list_to_numb - line no: 65 with args: (['a', 's', 'v'],), kwargs: {}
    2023-07-30 10:08:08,437 - INFO - string_list_to_numb
    2023-07-30 10:08:08,437 - INFO - ['a', 's', 'v']
    2023-07-30 10:08:08,437 - INFO - string_list_to_numb returned: [0, 18, 21]
    2023-07-30 10:08:08,437 - INFO - get_cesar - line no: 65 with args: ([0, 18, 21], 3), kwargs: {}
    2023-07-30 10:08:08,437 - INFO - [3, 21, 24]
    2023-07-30 10:08:08,437 - INFO - get_cesar returned: [3, 21, 24]
    2023-07-30 10:08:08,437 - INFO - numb_list_to_char_list - line no: 65 with args: ([3, 21, 24],), kwargs: {}
    2023-07-30 10:08:08,437 - INFO - ['d', 'v', 'y']
    2023-07-30 10:08:08,437 - INFO - numb_list_to_char_list returned: ['d', 'v', 'y']
    2023-07-30 10:08:08,437 - INFO - output_result - line no: 66 with args: (['d', 'v', 'y'],), kwargs: {}
    2023-07-30 10:08:08,438 - INFO - dvy
    2023-07-30 10:08:08,438 - INFO - output_result returned: dvy
    2023-07-30 10:08:08,438 - INFO - main returned: None
  learner_created: true
feedback_link: https://hyperskill.org/projects/365/stages/2164/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 30 Jul 2023 09:37:47 UTC"
record: 3
