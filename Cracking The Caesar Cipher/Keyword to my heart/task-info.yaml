type: edu
files:
- name: solution.py
  visible: true
  text: '# Write your code here'
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import CheckResult, TestedProgram, StageTest, dynamic_test, WrongAnswer
    import string
    # test featuring the vigenere cipher with provided clues


    def encoder_4(message, keyword):
        # making the encoded message
        # uses a vigenere cypher and the string.ascii_lowercase alphabet string
        # the shift for encoding is determined by the keyword's index, cycling through the keyword
        # spaces ' ' are not present in the string, so they are replaced by 'x's
        message_list = list(message.lower())
        message_list = ['x' if ' ' == letter else letter for letter in message_list]
        message_encoded_list = []
        for message_index in range(len(message_list)):
            keyword_index = message_index % len(keyword)
            letter = message_list[message_index]
            key_letter = keyword[keyword_index]
            letter_ascii_index = string.ascii_lowercase.index(letter)
            key_letter_ascii_index = string.ascii_lowercase.index(key_letter)
            message_encoded_list.append(string.ascii_lowercase[(letter_ascii_index + key_letter_ascii_index) % 26])
        message_encoded = ' '.join(message_encoded_list)
        return message_encoded


    class DecipherTest(StageTest):
        test_data = [
            # first message, second message, keyword
            # the keyword must be shorter than the first message
            # will be inputted as:
            #  non-encoded message
            #  the same message as before but encoded in a vigenere cipher
            #  the keyword length
            #  another encoded message
            ['t h e x k e y w o r d x w a s x b', 'less easy', 'b'],
            ['i x h o p e x t h a t x y o u x c a n x f i g u r e x t h i s x o u t', 'please come and eat more pie because i have been feeding the leftovers to my dog and she is getting fat', 'pie'],
            ['s e c r e t x m e s s a g e', 'i am glad that my dog cannot read the vigenere cipher yet', 'secret'],
            ['k e y w o r d', 'this is super fun', 'key'],
            ['s e c r e t s', 'thanks for humoring me with this project', 'word'],
            ['h u s h x h u s h', 'i hope that you had fun too', 'friend'],
            ['i x h a v e x a n x i d e a x f o r x a n x a l t e r n a t i v e x s e c r e t', 'say would you like to make a secret base', 'treehouse'],
            ['w e x c o u l d x m a k e x a x t r e e h o u s e x i n x t h e x w o o d s', 'that way we could talk out loud and look at animals', 'hideyhole'],
            ['w e x c o u l d x d i s g u i s e x o u r s e l v e s x a s x b e a r s', 'if we bring pies along the smell might give us away', 'sniff'],
            ['w e x m i g h t x g e t x s o m e x u n i n v i t e d x g u e s t s', 'but maybe my dog could stop by sometimes', 'dog'],
            ['a l t e r n a t i v e l y', 'maybe we could have multiple rotating treehouses based on the moon to hide better', 'lunar'],
            ['s c r i b b l e x s c r a b b l e', 'i look forward to out future correspondence', 'overnout']
        ]

        @dynamic_test(data=test_data)
        def test(self, *x):
            message_1 = x[0]
            encoded_message_1 = encoder_4(message=x[0].replace(' ', ''), keyword=x[2])
            keyword_length = len(x[2])
            encoded_message_2 = encoder_4(message=x[1], keyword=x[2])

            pr = TestedProgram()
            pr.start()
            output = pr.execute(stdin=f'{keyword_length}\n{message_1}\n{encoded_message_1}\n{encoded_message_2}')
            if not output:
                raise WrongAnswer('Your program did not print anything.')
            if not output.isascii():
                raise WrongAnswer('This string contains non-ascii values.')
            output_cleaned = output.lower().strip().replace(' ', '')
            if x[0].lower().replace('x', ' ').replace(' ', '') in output_cleaned:
                raise WrongAnswer('This may be the first deciphered message. '
                                  'Please only print the second deciphered message.')
            check = x[1].lower().replace('x', ' ').replace(' ', '') in output_cleaned
            return CheckResult(check, f'Wrong message returned. \nYou printed: {output}.')


    if __name__ == '__main__':
        DecipherTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import DecipherTest

    if __name__ == '__main__':    DecipherTest().run_tests()
  learner_created: false
- name: app.log
  visible: true
  text: |
    2023-07-30 11:37:47,035 - INFO - **** solution started ****
    2023-07-30 11:37:47,064 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,065 - WARNING - found shift value of: 21 , wpoozmnxjoxc
    2023-07-30 11:37:47,065 - INFO - output_result - line no: 80 with args: (['m', 'y', 'x', 'm', 'o', 'm', 'x', 'm', 'a', 'd', 'e', 'x', 's', 'o', 'm', 'e', 'x', 'p', 'i', 'e'],), kwargs: {}
    2023-07-30 11:37:47,065 - INFO - output_result returned: my mom made some pie
    2023-07-30 11:37:47,065 - INFO - main returned: None
    2023-07-30 11:37:47,067 - INFO - **** solution started ****
    2023-07-30 11:37:47,068 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,069 - WARNING - found shift value of: 24 , zsrrcpqamraf
    2023-07-30 11:37:47,070 - INFO - output_result - line no: 80 with args: (['p', 'l', 'e', 'a', 's', 'e', 'x', 'c', 'o', 'm', 'e', 'x', 't', 'r', 'y', 'x', 'a', 'x', 's', 'l', 'i', 'c', 'e'],), kwargs: {}
    2023-07-30 11:37:47,070 - INFO - output_result returned: please come try a slice
    2023-07-30 11:37:47,070 - INFO - main returned: None
    2023-07-30 11:37:47,072 - INFO - **** solution started ****
    2023-07-30 11:37:47,072 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,073 - WARNING - found shift value of: 2 , dwvvgtueqvej
    2023-07-30 11:37:47,073 - INFO - output_result - line no: 80 with args: (['t', 'h', 'e', 'x', 'h', 'o', 'u', 's', 'e', 'x', 's', 'm', 'e', 'l', 'l', 's', 'x', 'l', 'i', 'k', 'e', 'x', 'p', 'i', 'e'],), kwargs: {}
    2023-07-30 11:37:47,073 - INFO - output_result returned: the house smells like pie
    2023-07-30 11:37:47,073 - INFO - main returned: None
    2023-07-30 11:37:47,074 - INFO - **** solution started ****
    2023-07-30 11:37:47,076 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,076 - WARNING - found shift value of: 3 , exwwhuvfrwfk
    2023-07-30 11:37:47,077 - INFO - output_result - line no: 80 with args: (['m', 'y', 'x', 'd', 'o', 'g', 'x', 'i', 's', 'x', 's', 'u', 'p', 'e', 'r', 'x', 'l', 'a', 'z', 'y'],), kwargs: {}
    2023-07-30 11:37:47,077 - INFO - output_result returned: my dog is super lazy
    2023-07-30 11:37:47,077 - INFO - main returned: None
    2023-07-30 11:37:47,079 - INFO - **** solution started ****
    2023-07-30 11:37:47,080 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,081 - WARNING - found shift value of: 15 , qjiitghrdirw
    2023-07-30 11:37:47,081 - INFO - output_result - line no: 80 with args: (['i', 'f', 'x', 'y', 'o', 'u', 'x', 'd', 'o', 'x', 'n', 'o', 't', 'x', 'h', 'u', 'r', 'r', 'y', 'x', 'm', 'y', 'x', 'd', 'o', 'g', 'x', 'w', 'i', 'l', 'l', 'x', 'e', 'a', 't', 'x', 't', 'h', 'e', 'x', 'p', 'i', 'e'],), kwargs: {}
    2023-07-30 11:37:47,082 - INFO - output_result returned: if you do not hurry my dog will eat the pie
    2023-07-30 11:37:47,082 - INFO - main returned: None
    2023-07-30 11:37:47,084 - INFO - **** solution started ****
    2023-07-30 11:37:47,084 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,084 - WARNING - found shift value of: 4 , fyxxivwgsxgl
    2023-07-30 11:37:47,088 - INFO - output_result - line no: 80 with args: (['y', 'o', 'u', 'x', 'b', 'e', 't', 't', 'e', 'r', 'x', 'h', 'u', 'r', 'r', 'y', 'x', 'i', 'f', 'x', 'y', 'o', 'u', 'x', 'w', 'a', 'n', 't', 'x', 's', 'o', 'm', 'e'],), kwargs: {}
    2023-07-30 11:37:47,088 - INFO - output_result returned: you better hurry if you want some
    2023-07-30 11:37:47,088 - INFO - main returned: None
    2023-07-30 11:37:47,091 - INFO - **** solution started ****
    2023-07-30 11:37:47,091 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,092 - WARNING - found shift value of: 6 , hazzkxyiuzin
    2023-07-30 11:37:47,092 - INFO - output_result - line no: 80 with args: (['m', 'y', 'x', 'd', 'o', 'g', 'x', 'w', 'i', 'l', 'l', 'x', 'e', 'a', 't', 'x', 'i', 't', 'x', 'a', 'n', 'y', 'x', 'h', 'o', 'u', 'r', 'x', 'n', 'o', 'w'],), kwargs: {}
    2023-07-30 11:37:47,092 - INFO - output_result returned: my dog will eat it any hour now
    2023-07-30 11:37:47,092 - INFO - main returned: None
    2023-07-30 11:37:47,098 - INFO - **** solution started ****
    2023-07-30 11:37:47,100 - INFO - main - line no: 90 with args: (), kwargs: {}
    2023-07-30 11:37:47,101 - WARNING - found shift value of: 7 , ibaalyzjvajo
    2023-07-30 11:37:47,101 - INFO - output_result - line no: 80 with args: (['a', 'f', 't', 'e', 'r', 'x', 's', 'h', 'e', 'x', 'r', 'u', 'n', 's', 'x', 'o', 'u', 't', 'x', 'o', 'f', 'x', 't', 'r', 'e', 'a', 't', 's'],), kwargs: {}
    2023-07-30 11:37:47,101 - INFO - output_result returned: after she runs out of treats
    2023-07-30 11:37:47,101 - INFO - main returned: None
  learner_created: true
feedback_link: https://hyperskill.org/projects/365/stages/2165/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 30 Jul 2023 19:16:20 UTC"
record: -1
